{"expireTime":9007200860458685000,"key":"transformer-remark-markdown-html-9737255b3e8c0526db690b3627605e38-gatsby-remark-relative-imagesgatsby-remark-katexgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-autolink-headersgatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypantsgatsby-remark-external-links-","val":"<p>Hey, it’s the quarantine of 2020, so maybe you’ve seen it too - <a href=\"https://www.imdb.com/title/tt11464826/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">“The social dilemma”</a>. If you didn’t, the movie talks about various technologically and psychologically “inspired” methods. Methods that <strong>evil</strong> social networks use to compete with our girlfiends, boyfriends, pets and kids - you get the idea.</p>\n<p>I didn’t find the methods at all surprising or offensive though - I mean what else would one expect, they need to make money while still serving petabytes of duck face, posed motorcycle and cat pics each day.</p>\n<p>Anyway. Last night I was browsing through <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN and found the section about intersection observer.</a>. It’s an API to detect when content intersects with a chosen viewport.</p>\n<p>I wanted to try it out, and the movie gave me some thoughts. Basically, it speculates how the networks train themselves to screw with us better. They:</p>\n<ul>\n<li>measure the precise time each piece of content stays on our viewports;</li>\n<li>detect subtle stops and variations in our scrolling patterns to detect boredom / readiness to leave;</li>\n<li>show content tailored to spike our interest if they detect we’re ready to leave;</li>\n<li>all kinds of similar evil tracking stuff…</li>\n</ul>\n<p>While I understand that the real magic there happens at the data science level, I got interested in at least building a (simplified) tracking part. The Intersection Observer API, designed to efficiently track when objects enter and leave the viewport was a perfect match.</p>\n<h2 id=\"the-build\" style=\"position:relative;\"><a href=\"#the-build\" aria-label=\"the build permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The build</h2>\n<p>Let’s start with a single image. Give it a top and bottom margin of <code class=\"language-text\">101vh</code> so that you need to scroll to reveal it, and can scroll past it to hide it.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">.photo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 101vh 0<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>photo<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>photo<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/photo.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>For now, let’s keep it simple and agree that at least <strong>75%</strong> of the image needs to be on screen for it to be considered visible. Let’s configure the intersection observer by configuring it’s threshold property to be <code class=\"language-text\">0.75</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">initObserver</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    threshold<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.75</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> observer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntersectionObserver</span><span class=\"token punctuation\">(</span>handleIntersect<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  observer<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Each time <code class=\"language-text\">0.75</code> threshold is passed, a callback <code class=\"language-text\">handleIntersect</code> will be called. So, this will <strong>be called 2 times</strong> while scrolling down and past the image:</p>\n<ol>\n<li>when 75% of image becomes visible while image is being revealed from the bottom of the viewport (towards 100% visibility)</li>\n<li>when 75% of image becomes visible while image is being hidden by the top of viewport (towards 0% visibility)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> timeLastVisible <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">handleIntersect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entries</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  entries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>isIntersecting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      timeLastVisible <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Going in.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeLastVisible<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> onScreenDuration <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span>time <span class=\"token operator\">-</span> timeLastVisible<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n      timeLastVisible <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Going out. Was on screen for: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>onScreenDuration<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">s</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> loadedPhotoElem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"photo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">initObserver</span><span class=\"token punctuation\">(</span>loadedPhotoElem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For now we will only have 1 entry, so don’ worry about that just yet. The important thing, is each entry provided to the callback contains usefull properties. We’ll use the <code class=\"language-text\">entry.isIntersecting</code> (read the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN specs</a> learn about the others ).</p>\n<ol>\n<li>75% callback (towards 100% visiblity) | <code class=\"language-text\">entry.isVisible === true;</code></li>\n<li>75% callback (towards 0% visiblity) | <code class=\"language-text\">entry.isVisible === false;</code></li>\n</ol>\n<p>So, the property allows us to distinguish when the photo is becoming invisible vs becoming visible.</p>"}